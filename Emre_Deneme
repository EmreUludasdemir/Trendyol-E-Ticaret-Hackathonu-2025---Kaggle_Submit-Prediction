{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c9ac43e0",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-15T10:59:09.576498Z",
     "iopub.status.busy": "2025-08-15T10:59:09.576215Z",
     "iopub.status.idle": "2025-08-15T11:15:06.737575Z",
     "shell.execute_reply": "2025-08-15T11:15:06.736314Z"
    },
    "papermill": {
     "duration": 957.170101,
     "end_time": "2025-08-15T11:15:06.742642",
     "exception": false,
     "start_time": "2025-08-15T10:59:09.572541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[link] train_sessions.parquet -> /kaggle/input/trendyol/data/train_sessions.parquet\n",
      "[link] test_sessions.parquet -> /kaggle/input/trendyol/data/test_sessions.parquet\n",
      "[link] content/metadata.parquet -> /kaggle/input/trendyol/data/content/metadata.parquet\n",
      "[link] content/price_rate_review_data.parquet -> /kaggle/input/trendyol/data/content/price_rate_review_data.parquet\n",
      "[link] content/search_log.parquet -> /kaggle/input/trendyol/data/content/search_log.parquet\n",
      "[link] content/sitewide_log.parquet -> /kaggle/input/trendyol/data/content/sitewide_log.parquet\n",
      "[link] user/metadata.parquet -> /kaggle/input/trendyol/data/user/metadata.parquet\n",
      "[link] user/sitewide_log.parquet -> /kaggle/input/trendyol/data/user/sitewide_log.parquet\n",
      "[link] term/search_log.parquet -> /kaggle/input/trendyol/data/term/search_log.parquet\n",
      "[duckdb] View'lar oluşturuluyor...\n",
      "[duckdb] Özet tablolar oluşturuluyor...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d4eacaffa049466784fa25c4cdd282ca",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e5fd380a359a4dd8a00804ac8a5cfe60",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "73886cd23eb04d25b060d131c9badd36",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[duckdb] Eğitim tablosu hazırlanıyor...\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f516e2f7c3d14363b7a6e43b10f1e0d4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[mem] train_df (joined): 1518.39 MB, shape=(2773805, 39)\n",
      "[mem] train_df (typed): 1219.47 MB, shape=(2773805, 43)\n",
      "[feat] 38 feature kullanılacak\n",
      "[lgb] clicked fold 0\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.748977\tvalid's auc: 0.664752\n",
      "Early stopping, best iteration is:\n",
      "[63]\ttrain's auc: 0.696813\tvalid's auc: 0.665476\n",
      "[lgb] clicked fold 1\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.750324\tvalid's auc: 0.654927\n",
      "Early stopping, best iteration is:\n",
      "[99]\ttrain's auc: 0.716741\tvalid's auc: 0.656831\n",
      "[lgb] clicked fold 2\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.750982\tvalid's auc: 0.65878\n",
      "Early stopping, best iteration is:\n",
      "[93]\ttrain's auc: 0.714181\tvalid's auc: 0.66062\n",
      "[lgb] clicked fold 3\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.749984\tvalid's auc: 0.659368\n",
      "Early stopping, best iteration is:\n",
      "[132]\ttrain's auc: 0.728515\tvalid's auc: 0.659677\n",
      "[lgb] clicked fold 4\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "Early stopping, best iteration is:\n",
      "[44]\ttrain's auc: 0.688922\tvalid's auc: 0.654448\n",
      "[lgb] ordered fold 0\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.974194\tvalid's auc: 0.763806\n",
      "Early stopping, best iteration is:\n",
      "[108]\ttrain's auc: 0.935225\tvalid's auc: 0.764063\n",
      "[lgb] ordered fold 1\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.972789\tvalid's auc: 0.752617\n",
      "Early stopping, best iteration is:\n",
      "[178]\ttrain's auc: 0.967923\tvalid's auc: 0.75339\n",
      "[lgb] ordered fold 2\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "Early stopping, best iteration is:\n",
      "[40]\ttrain's auc: 0.849369\tvalid's auc: 0.749689\n",
      "[lgb] ordered fold 3\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.972296\tvalid's auc: 0.741388\n",
      "Early stopping, best iteration is:\n",
      "[62]\ttrain's auc: 0.890861\tvalid's auc: 0.742618\n",
      "[lgb] ordered fold 4\n",
      "Training until validation scores don't improve for 150 rounds\n",
      "[200]\ttrain's auc: 0.972234\tvalid's auc: 0.753684\n",
      "Early stopping, best iteration is:\n",
      "[120]\ttrain's auc: 0.943574\tvalid's auc: 0.755668\n",
      "[info] OOF özet:\n",
      "count    2.773805e+06\n",
      "mean     1.307310e-02\n",
      "std      8.218338e-03\n",
      "min      8.294558e-04\n",
      "25%      7.968315e-03\n",
      "50%      1.185292e-02\n",
      "75%      1.651635e-02\n",
      "max      5.682398e-01\n",
      "dtype: float64\n",
      "[info] feature_importance_top30.csv kaydedildi.\n",
      "[duckdb] Test veri akışı başlıyor…\n",
      "[sanity] helpers defined: True True True\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "58ebdfbaf3274c4bbd2fb36eb6d809aa",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[batch] fetched offset=0 rows=2000000\n",
      "[batch] written submission_part_0.csv in 48.7s\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "499e0804cd864a23bbc3fc6408a45ddb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[batch] fetched offset=2000000 rows=988697\n",
      "[batch] written submission_part_2000000.csv in 25.5s\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "48f03c26c017490f9653000ffadca84a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[merge] Parçalar birleştiriliyor…\n",
      "[done] submission yazıldı: submission.csv, satır sayısı = 19713 + başlık\n",
      "[check] İlk 3 satır:\n",
      "              session_id                                         prediction\n",
      "0  test_0001ff614df60933  4725484b4a90c923 89b1a5be8f804fe7 880ffc2b061b...\n",
      "1  test_00041895a35c4813  2fb818f29f2e9bbc e95b82f982466786 39ad83a925c8...\n",
      "2  test_00058d4dc9727758  532f78e69e290328 fe92918996a556d8 f243ca14ab5e...\n",
      "\n",
      "Kaggle'a gönderim için:\n",
      "kaggle competitions submit -c trendyol-e-ticaret-hackathonu-2025-kaggle -f submission.csv -m \"LGBM + geniş özellik seti\"\n"
     ]
    }
   ],
   "source": [
    "# Kaggle Bootstrap: inputları otomatik bağla, eksik paketleri kontrol et (bu hücreyi en başta çalıştırın)\n",
    "import os, glob, shutil, sys, importlib, subprocess\n",
    "\n",
    "# 1) Paket kontrol/kurulum (internet kapalıysa çoğu zaten yüklüdür; eksikse dene)\n",
    "def ensure_packages(pkgs=(\"duckdb\",\"polars\",\"lightgbm\",\"pyarrow\")):\n",
    "    missing=[]\n",
    "    for p in pkgs:\n",
    "        try:\n",
    "            importlib.import_module(p)\n",
    "        except ImportError:\n",
    "            missing.append(p)\n",
    "    if missing:\n",
    "        try:\n",
    "            subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-q\", *missing])\n",
    "            print(\"[pip] Yüklendi:\", missing)\n",
    "        except Exception as e:\n",
    "            print(\"[pip] Kurulum başarısız veya internet kapalı:\", missing, e)\n",
    "\n",
    "ensure_packages()\n",
    "\n",
    "# 2) Kaggle input -> çalışma dizinine beklenen isimlerle bağla (symlink/copy)\n",
    "BASE_IN = \"/kaggle/input\"\n",
    "\n",
    "expected = {\n",
    "    \"train_sessions.parquet\": [\"**/train_sessions.parquet\"],\n",
    "    \"test_sessions.parquet\":  [\"**/test_sessions.parquet\"],\n",
    "    \"content/metadata.parquet\": [\"**/content/**/metadata.parquet\", \"**/metadata.parquet\"],\n",
    "    \"content/price_rate_review_data.parquet\": [\"**/content/**/price_rate_review_data.parquet\", \"**/price_rate_review_data.parquet\"],\n",
    "    \"content/search_log.parquet\": [\"**/content/**/search_log.parquet\", \"**/search_log.parquet\"],\n",
    "    \"content/sitewide_log.parquet\": [\"**/content/**/sitewide_log.parquet\", \"**/sitewide_log.parquet\"],\n",
    "    \"user/metadata.parquet\": [\"**/user/**/metadata.parquet\", \"**/user_metadata.parquet\", \"**/user-meta.parquet\", \"**/user_metadata*.parquet\"],\n",
    "    \"user/sitewide_log.parquet\": [\"**/user/**/sitewide_log.parquet\", \"**/user_sitewide_log.parquet\"],\n",
    "    \"term/search_log.parquet\": [\"**/term/**/search_log.parquet\", \"**/term_search_log.parquet\"],\n",
    "}\n",
    "\n",
    "def ensure_link(src, dst):\n",
    "    os.makedirs(os.path.dirname(dst) or \".\", exist_ok=True)\n",
    "    if os.path.exists(dst):\n",
    "        return\n",
    "    try:\n",
    "        os.symlink(src, dst)\n",
    "        print(f\"[link] {dst} -> {src}\")\n",
    "    except Exception:\n",
    "        shutil.copy2(src, dst)\n",
    "        print(f\"[copy] {dst} <- {src}\")\n",
    "\n",
    "def map_inputs():\n",
    "    root = BASE_IN if os.path.exists(BASE_IN) else \".\"\n",
    "    for dst, patterns in expected.items():\n",
    "        found = None\n",
    "        for pat in patterns:\n",
    "            matches = glob.glob(os.path.join(root, pat), recursive=True)\n",
    "            if matches:\n",
    "                found = matches[0]\n",
    "                break\n",
    "        if not found:\n",
    "            print(f\"[WARN] Bulunamadı: {dst}. Doğru competition/dataset'i Notebook'a eklediğinizden emin olun.\")\n",
    "            continue\n",
    "        ensure_link(found, dst)\n",
    "\n",
    "map_inputs()\n",
    "\n",
    "# -*- coding: utf-8 -*-\n",
    "\"\"\"\n",
    "Trendyol E-Ticaret Hackathonu 2025\n",
    "Yüksek performanslı tahmin boru hattı\n",
    "\n",
    "Öne çıkanlar:\n",
    "- DuckDB ile büyük dosyalarda hızlı toplulaştırma ve hafif join\n",
    "- Polars/Pandas ile kontrollü dönüşüm\n",
    "- Zengin özellik seti (kullanıcı/ürün/terim + trend + fiyat/puan + zamansal)\n",
    "- clicked ve ordered için iki LightGBM modeli + ağırlıklı sıralama\n",
    "- Batch inferans ve yarışma formatında submission üretimi\n",
    "\n",
    "Dosya yapısı (aynı klasörde/uygun path’lerde beklenir):\n",
    "- train_sessions.parquet, test_sessions.parquet\n",
    "- content/metadata.parquet\n",
    "- content/price_rate_review_data.parquet\n",
    "- content/search_log.parquet\n",
    "- content/sitewide_log.parquet\n",
    "- user/metadata.parquet\n",
    "- user/sitewide_log.parquet\n",
    "- term/search_log.parquet\n",
    "\n",
    "Gereksinimler: pip install duckdb polars pandas numpy scikit-learn lightgbm pyarrow\n",
    "\"\"\"\n",
    "\n",
    "import os\n",
    "import gc\n",
    "import json\n",
    "import math\n",
    "import time\n",
    "import uuid\n",
    "import duckdb\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import polars as pl\n",
    "from datetime import datetime\n",
    "from sklearn.model_selection import GroupKFold\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "import lightgbm as lgb\n",
    "\n",
    "RANDOM_STATE = 42\n",
    "np.random.seed(RANDOM_STATE)\n",
    "\n",
    "###############################################################################\n",
    "# 0) Yardımcılar\n",
    "###############################################################################\n",
    "\n",
    "def ensure_dir(path: str):\n",
    "    d = os.path.dirname(path)\n",
    "    if d and not os.path.exists(d):\n",
    "        os.makedirs(d, exist_ok=True)\n",
    "\n",
    "\n",
    "def memory_info(df: pd.DataFrame, name: str = \"DF\"):\n",
    "    mb = df.memory_usage(deep=True).sum() / (1024**2)\n",
    "    print(f\"[mem] {name}: {mb:.2f} MB, shape={df.shape}\")\n",
    "\n",
    "\n",
    "def label_encode_train_and_map(df: pd.DataFrame, cols):\n",
    "    encoders = {}\n",
    "    for c in cols:\n",
    "        le = LabelEncoder()\n",
    "        df[c] = le.fit_transform(df[c].astype(str))\n",
    "        encoders[c] = le\n",
    "    return df, encoders\n",
    "\n",
    "\n",
    "def label_encode_apply(df: pd.DataFrame, encoders):\n",
    "    # Bilinmeyen kategorileri güvenle işle\n",
    "    for c, le in encoders.items():\n",
    "        vals = df[c].astype(str)\n",
    "        unseen = ~vals.isin(le.classes_)\n",
    "        if unseen.any():\n",
    "            # classes_’a yeni etiket ekle (None placeholder)\n",
    "            le.classes_ = np.append(le.classes_, vals[unseen].unique())\n",
    "        df[c] = le.transform(vals)\n",
    "    return df\n",
    "\n",
    "\n",
    "def add_time_parts(df: pd.DataFrame, ts_col: str = \"ts_hour\"):\n",
    "    ts = pd.to_datetime(df[ts_col], errors=\"coerce\")\n",
    "    df[\"hour\"] = ts.dt.hour.astype(\"Int16\")\n",
    "    df[\"dow\"] = ts.dt.dayofweek.astype(\"Int16\")\n",
    "    df[\"week\"] = ts.dt.isocalendar().week.astype(\"Int16\")\n",
    "    df[\"month\"] = ts.dt.month.astype(\"Int8\")\n",
    "    return df\n",
    "\n",
    "\n",
    "###############################################################################\n",
    "# 1) DuckDB bağlantısı ve View'lar\n",
    "###############################################################################\n",
    "con = duckdb.connect(database=\":memory:\")\n",
    "con.execute(\"PRAGMA threads=%d\" % os.cpu_count())\n",
    "\n",
    "print(\"[duckdb] View'lar oluşturuluyor...\")\n",
    "\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE VIEW train_sessions AS SELECT * FROM 'train_sessions.parquet';\n",
    "CREATE OR REPLACE VIEW test_sessions  AS SELECT * FROM 'test_sessions.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW content_meta AS SELECT \n",
    "  content_id_hashed,\n",
    "  attribute_type_count,\n",
    "  total_attribute_option_count,\n",
    "  merchant_count,\n",
    "  filterable_label_count,\n",
    "  CAST(content_creation_date AS TIMESTAMP) AS content_creation_ts\n",
    "FROM 'content/metadata.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW price_reviews AS SELECT \n",
    "  content_id_hashed,\n",
    "  CAST(update_date AS TIMESTAMP) AS update_ts,\n",
    "  original_price,\n",
    "  selling_price,\n",
    "  discounted_price,\n",
    "  content_review_count,\n",
    "  content_review_wth_media_count,\n",
    "  content_rate_count,\n",
    "  content_rate_avg\n",
    "FROM 'content/price_rate_review_data.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW content_sitewide AS SELECT \n",
    "  content_id_hashed,\n",
    "  CAST(date AS DATE) AS d,\n",
    "  total_click,\n",
    "  total_cart,\n",
    "  total_fav,\n",
    "  total_order\n",
    "FROM 'content/sitewide_log.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW content_search AS SELECT \n",
    "  content_id_hashed,\n",
    "  CAST(date AS DATE) AS d,\n",
    "  total_search_impression,\n",
    "  total_search_click\n",
    "FROM 'content/search_log.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW user_meta AS SELECT \n",
    "  user_id_hashed,\n",
    "  user_gender,\n",
    "  user_birth_year,\n",
    "  user_tenure_in_days\n",
    "FROM 'user/metadata.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW user_sitewide AS SELECT \n",
    "  user_id_hashed,\n",
    "  CAST(ts_hour AS TIMESTAMP) AS ts,\n",
    "  total_click,\n",
    "  total_cart,\n",
    "  total_fav,\n",
    "  total_order\n",
    "FROM 'user/sitewide_log.parquet';\n",
    "\n",
    "CREATE OR REPLACE VIEW term_search AS SELECT \n",
    "  CAST(ts_hour AS TIMESTAMP) AS ts,\n",
    "  search_term_normalized,\n",
    "  total_search_impression,\n",
    "  total_search_click\n",
    "FROM 'term/search_log.parquet';\n",
    "\"\"\")\n",
    "\n",
    "###############################################################################\n",
    "# 2) Büyük tablolardan kalıcı özet (aggregate) tablolar\n",
    "###############################################################################\n",
    "print(\"[duckdb] Özet tablolar oluşturuluyor...\")\n",
    "\n",
    "# Ürün bazlı günlük özetler (genel ve son 30 gün)\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE agg_content_all AS\n",
    "SELECT\n",
    "  content_id_hashed,\n",
    "  AVG(total_click)  AS c_click_mean,\n",
    "  AVG(total_order)  AS c_order_mean,\n",
    "  SUM(total_order)  AS c_order_sum,\n",
    "  AVG(total_fav)    AS c_fav_mean,\n",
    "  AVG(total_cart)   AS c_cart_mean\n",
    "FROM content_sitewide\n",
    "GROUP BY 1;\n",
    "\"\"\")\n",
    "\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE agg_content_recent AS\n",
    "WITH mx AS (\n",
    "  SELECT content_id_hashed, MAX(d) AS max_d FROM content_sitewide GROUP BY 1\n",
    "),\n",
    "win AS (\n",
    "  SELECT s.* FROM content_sitewide s JOIN mx USING(content_id_hashed)\n",
    "  WHERE s.d >= max_d - INTERVAL 30 DAY\n",
    ")\n",
    "SELECT\n",
    "  content_id_hashed,\n",
    "  AVG(total_click) AS c_r30_click_mean,\n",
    "  AVG(total_order) AS c_r30_order_mean,\n",
    "  SUM(total_order) AS c_r30_order_sum\n",
    "FROM win\n",
    "GROUP BY 1;\n",
    "\"\"\")\n",
    "\n",
    "# Ürün bazlı arama CTR'ları\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE agg_content_search AS\n",
    "SELECT\n",
    "  content_id_hashed,\n",
    "  SUM(total_search_impression) AS c_imp_sum,\n",
    "  SUM(total_search_click)     AS c_clk_sum,\n",
    "  CASE WHEN SUM(total_search_impression) > 0\n",
    "       THEN SUM(total_search_click) / SUM(total_search_impression)\n",
    "       ELSE NULL END AS c_ctr\n",
    "FROM content_search\n",
    "GROUP BY 1;\n",
    "\"\"\")\n",
    "\n",
    "# Fiyat/puan (en güncel kayıt)\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE latest_price AS\n",
    "SELECT * FROM (\n",
    "  SELECT *, ROW_NUMBER() OVER (PARTITION BY content_id_hashed ORDER BY update_ts DESC) AS rn\n",
    "  FROM price_reviews\n",
    ") WHERE rn=1;\n",
    "\"\"\")\n",
    "\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE price_features AS\n",
    "SELECT\n",
    "  content_id_hashed,\n",
    "  original_price,\n",
    "  selling_price,\n",
    "  discounted_price,\n",
    "  content_rate_avg,\n",
    "  content_rate_count,\n",
    "  content_review_count,\n",
    "  content_review_wth_media_count,\n",
    "  CASE WHEN original_price IS NOT NULL AND original_price > 0\n",
    "       THEN (original_price - COALESCE(discounted_price, selling_price)) / original_price\n",
    "       ELSE NULL END AS discount_pct\n",
    "FROM latest_price;\n",
    "\"\"\")\n",
    "\n",
    "# Kullanıcı bazlı genel oranlar\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE agg_user AS\n",
    "SELECT\n",
    "  user_id_hashed,\n",
    "  AVG(total_click)  AS u_click_mean,\n",
    "  AVG(total_cart)   AS u_cart_mean,\n",
    "  AVG(total_fav)    AS u_fav_mean,\n",
    "  AVG(total_order)  AS u_order_mean\n",
    "FROM user_sitewide\n",
    "GROUP BY 1;\n",
    "\"\"\")\n",
    "\n",
    "# Arama terimi CTR\n",
    "con.execute(\"\"\"\n",
    "CREATE OR REPLACE TABLE agg_term AS\n",
    "SELECT\n",
    "  search_term_normalized,\n",
    "  SUM(total_search_impression) AS t_imp_sum,\n",
    "  SUM(total_search_click)     AS t_clk_sum,\n",
    "  CASE WHEN SUM(total_search_impression) > 0\n",
    "       THEN SUM(total_search_click) / SUM(total_search_impression)\n",
    "       ELSE NULL END AS t_ctr\n",
    "FROM term_search\n",
    "GROUP BY 1;\n",
    "\"\"\")\n",
    "\n",
    "###############################################################################\n",
    "# 3) Eğitim tablosu (feature join) – yalnız gerekli kolonlar\n",
    "###############################################################################\n",
    "print(\"[duckdb] Eğitim tablosu hazırlanıyor...\")\n",
    "train_df = con.execute(\"\"\"\n",
    "SELECT \n",
    "  t.session_id,\n",
    "  CAST(t.ts_hour AS TIMESTAMP) AS ts_hour,\n",
    "  t.search_term_normalized,\n",
    "  t.user_id_hashed,\n",
    "  t.content_id_hashed,\n",
    "  t.clicked,\n",
    "  t.ordered,\n",
    "  -- ürün özetleri\n",
    "  a.c_click_mean, a.c_order_mean, a.c_order_sum, a.c_fav_mean, a.c_cart_mean,\n",
    "  r.c_r30_click_mean, r.c_r30_order_mean, r.c_r30_order_sum,\n",
    "  s.c_imp_sum, s.c_clk_sum, s.c_ctr,\n",
    "  -- fiyat/puan\n",
    "  p.original_price, p.selling_price, p.discounted_price, p.discount_pct,\n",
    "  p.content_rate_avg, p.content_rate_count, p.content_review_count, p.content_review_wth_media_count,\n",
    "  -- kullanıcı özetleri\n",
    "  u.u_click_mean, u.u_cart_mean, u.u_fav_mean, u.u_order_mean,\n",
    "  -- terim özetleri\n",
    "  tm.t_imp_sum, tm.t_clk_sum, tm.t_ctr,\n",
    "  -- meta\n",
    "  m.attribute_type_count, m.total_attribute_option_count, m.merchant_count, m.filterable_label_count,\n",
    "  m.content_creation_ts,\n",
    "  -- türev: içerik yaş\n",
    "  DATE_DIFF('day', m.content_creation_ts, CAST(t.ts_hour AS TIMESTAMP)) AS days_since_creation\n",
    "FROM train_sessions t\n",
    "LEFT JOIN agg_content_all a     USING(content_id_hashed)\n",
    "LEFT JOIN agg_content_recent r  USING(content_id_hashed)\n",
    "LEFT JOIN agg_content_search s  USING(content_id_hashed)\n",
    "LEFT JOIN price_features p      USING(content_id_hashed)\n",
    "LEFT JOIN agg_user u            USING(user_id_hashed)\n",
    "LEFT JOIN agg_term tm           USING(search_term_normalized)\n",
    "LEFT JOIN content_meta m        USING(content_id_hashed)\n",
    "\"\"\").df()\n",
    "\n",
    "memory_info(train_df, \"train_df (joined)\")\n",
    "\n",
    "# Basit zamansal kolonlar\n",
    "train_df = add_time_parts(train_df, \"ts_hour\")\n",
    "\n",
    "# Nümerik tipleri hafifletme\n",
    "for c in train_df.select_dtypes(include=[\"float64\"]).columns:\n",
    "    train_df[c] = train_df[c].astype(\"float32\")\n",
    "# Güvenli integer downcast: NA varsa pandas'ın nullable Int32'sine çevir\n",
    "for c in train_df.select_dtypes(include=[\"int64\",\"Int64\"]).columns:\n",
    "    if c not in [\"clicked\", \"ordered\"]:\n",
    "        if train_df[c].isna().any():\n",
    "            train_df[c] = train_df[c].astype(\"Int32\")  # NA destekli\n",
    "        else:\n",
    "            train_df[c] = train_df[c].astype(\"int32\")\n",
    "\n",
    "memory_info(train_df, \"train_df (typed)\")\n",
    "\n",
    "###############################################################################\n",
    "# 4) Kategorik kodlama\n",
    "###############################################################################\n",
    "cat_cols = [\"search_term_normalized\", \"user_id_hashed\", \"content_id_hashed\"]\n",
    "train_df, encoders = label_encode_train_and_map(train_df, cat_cols)\n",
    "\n",
    "# Özellik listesi\n",
    "drop_cols = [\"session_id\", \"ts_hour\", \"clicked\", \"ordered\", \"content_creation_ts\"]\n",
    "features = [c for c in train_df.columns if c not in drop_cols]\n",
    "# Datetime kolonlarını modelden çıkar (LightGBM doğrudan desteklemez)\n",
    "from pandas.api.types import is_datetime64_any_dtype\n",
    "_dt_cols = [c for c in features if is_datetime64_any_dtype(train_df[c])]\n",
    "if _dt_cols:\n",
    "    print(\"[feat] dropping datetime cols:\", _dt_cols)\n",
    "    features = [c for c in features if c not in _dt_cols]\n",
    "print(f\"[feat] {len(features)} feature kullanılacak\")\n",
    "\n",
    "###############################################################################\n",
    "# 5) LightGBM – iki model (clicked & ordered)\n",
    "###############################################################################\n",
    "params = dict(\n",
    "    objective=\"binary\",\n",
    "    metric=\"auc\",\n",
    "    learning_rate=0.05,\n",
    "    num_leaves=96,\n",
    "    min_data_in_leaf=50,\n",
    "    feature_fraction=0.85,\n",
    "    bagging_fraction=0.85,\n",
    "    bagging_freq=1,\n",
    "    max_bin=255,\n",
    "    verbosity=-1,\n",
    "    seed=RANDOM_STATE,\n",
    ")\n",
    "\n",
    "# Oturum bazlı CV önerilir (aynı oturum train/valid karışmasın)\n",
    "cv = GroupKFold(n_splits=5)\n",
    "\n",
    "# LightGBM ile tip uyuşmazlıklarını önlemek için float32'e çevir\n",
    "X = train_df[features].astype(\"float32\")\n",
    "y_click = train_df[\"clicked\"].astype(int)\n",
    "y_order = train_df[\"ordered\"].astype(int)\n",
    "\n",
    "groups = train_df[\"session_id\"].values  # oturum bazlı grup\n",
    "\n",
    "\n",
    "def fit_lgb_cv(X, y, groups, label):\n",
    "    oof = np.zeros(len(X), dtype=float)\n",
    "    models = []\n",
    "    for fold, (tr, va) in enumerate(cv.split(X, y, groups)):\n",
    "        X_tr, y_tr = X.iloc[tr], y.iloc[tr]\n",
    "        X_va, y_va = X.iloc[va], y.iloc[va]\n",
    "        l_tr = lgb.Dataset(X_tr, label=y_tr, free_raw_data=False)\n",
    "        l_va = lgb.Dataset(X_va, label=y_va, free_raw_data=False)\n",
    "        print(f\"[lgb] {label} fold {fold}\")\n",
    "        model = lgb.train(\n",
    "            params,\n",
    "            l_tr,\n",
    "            valid_sets=[l_tr, l_va],\n",
    "            valid_names=[\"train\", \"valid\"],\n",
    "            num_boost_round=4000,\n",
    "            callbacks=[\n",
    "                lgb.early_stopping(stopping_rounds=150),\n",
    "                lgb.log_evaluation(period=200),\n",
    "            ],\n",
    "        )\n",
    "        models.append(model)\n",
    "        oof[va] = model.predict(X_va, num_iteration=model.best_iteration)\n",
    "    return models, oof\n",
    "\n",
    "click_models, oof_click = fit_lgb_cv(X, y_click, groups, label=\"clicked\")\n",
    "order_models, oof_order = fit_lgb_cv(X, y_order, groups, label=\"ordered\")\n",
    "\n",
    "# Basit OOF kombinasyonu (hackathon ağırlığına paralel)\n",
    "oof_final = 0.7 * oof_order + 0.3 * oof_click\n",
    "print(\"[info] OOF özet:\")\n",
    "print(pd.Series(oof_final).describe())\n",
    "\n",
    "# Önemli feature’lar (ilk 30)\n",
    "try:\n",
    "    importances = np.mean([m.feature_importance(importance_type='gain') for m in click_models + order_models], axis=0)\n",
    "    fi = pd.DataFrame({\"feature\": features, \"importance\": importances}).sort_values(\"importance\", ascending=False)\n",
    "    fi.head(30).to_csv(\"feature_importance_top30.csv\", index=False)\n",
    "    print(\"[info] feature_importance_top30.csv kaydedildi.\")\n",
    "except Exception as e:\n",
    "    print(\"[warn] Feature importance çıkarılamadı:\", e)\n",
    "\n",
    "###############################################################################\n",
    "# 6) Test feature’ları – batch içe al, encode et, tahmin et, sıralayıp yaz\n",
    "###############################################################################\n",
    "print(\"[duckdb] Test veri akışı başlıyor…\")\n",
    "\n",
    "# Test view hazır (yukarıda). Aynı join modeli ile test setini part part çekelim.\n",
    "\n",
    "def fetch_test_batch(offset: int, limit: int = 2_000_000):\n",
    "    \"\"\"Fetch a test batch with all feature joins via DuckDB.\"\"\"\n",
    "    q = f\"\"\"\n",
    "    SELECT \n",
    "      t.session_id,\n",
    "      CAST(t.ts_hour AS TIMESTAMP) AS ts_hour,\n",
    "      t.search_term_normalized,\n",
    "      t.user_id_hashed,\n",
    "      t.content_id_hashed,\n",
    "      a.c_click_mean, a.c_order_mean, a.c_order_sum, a.c_fav_mean, a.c_cart_mean,\n",
    "      r.c_r30_click_mean, r.c_r30_order_mean, r.c_r30_order_sum,\n",
    "      s.c_imp_sum, s.c_clk_sum, s.c_ctr,\n",
    "      p.original_price, p.selling_price, p.discounted_price, p.discount_pct,\n",
    "      p.content_rate_avg, p.content_rate_count, p.content_review_count, p.content_review_wth_media_count,\n",
    "      u.u_click_mean, u.u_cart_mean, u.u_fav_mean, u.u_order_mean,\n",
    "      tm.t_imp_sum, tm.t_clk_sum, tm.t_ctr,\n",
    "      m.attribute_type_count, m.total_attribute_option_count, m.merchant_count, m.filterable_label_count,\n",
    "      m.content_creation_ts,\n",
    "      DATE_DIFF('day', m.content_creation_ts, CAST(t.ts_hour AS TIMESTAMP)) AS days_since_creation\n",
    "    FROM test_sessions t\n",
    "    LEFT JOIN agg_content_all a     USING(content_id_hashed)\n",
    "    LEFT JOIN agg_content_recent r  USING(content_id_hashed)\n",
    "    LEFT JOIN agg_content_search s  USING(content_id_hashed)\n",
    "    LEFT JOIN price_features p      USING(content_id_hashed)\n",
    "    LEFT JOIN agg_user u            USING(user_id_hashed)\n",
    "    LEFT JOIN agg_term tm           USING(search_term_normalized)\n",
    "    LEFT JOIN content_meta m        USING(content_id_hashed)\n",
    "    LIMIT {limit} OFFSET {offset}\n",
    "    \"\"\"\n",
    "    df = con.execute(q).df()\n",
    "    return df\n",
    "\n",
    "\n",
    "def encode_and_timeparts(df: pd.DataFrame):\n",
    "    \"\"\"Feature type normalization for test batches.\n",
    "    - Adds time parts\n",
    "    - Safe integer downcast with NA-friendly Int32\n",
    "    - Preserves raw content_id for submission\n",
    "    - Label-encodes using fitted encoders\n",
    "    - Returns cleaned DataFrame\n",
    "    \"\"\"\n",
    "    df = add_time_parts(df, \"ts_hour\")\n",
    "\n",
    "    # Preserve raw content_id for submission before any encoding\n",
    "    if \"content_id_hashed\" in df.columns and \"content_id_raw\" not in df.columns:\n",
    "        df[\"content_id_raw\"] = df[\"content_id_hashed\"].astype(str)\n",
    "\n",
    "    # Downcast floats\n",
    "    for c in df.select_dtypes(include=[\"float64\"]).columns:\n",
    "        df[c] = df[c].astype(\"float32\")\n",
    "\n",
    "    # Safe integer downcast (keep NA as Int32)\n",
    "    for c in df.select_dtypes(include=[\"int64\",\"Int64\"]).columns:\n",
    "        if c not in [\"clicked\", \"ordered\"]:\n",
    "            if df[c].isna().any():\n",
    "                df[c] = df[c].astype(\"Int32\")\n",
    "            else:\n",
    "                df[c] = df[c].astype(\"int32\")\n",
    "\n",
    "    # Apply label encoders (extend with unknowns)\n",
    "    df = label_encode_apply(df, encoders)\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "def predict_batch(df: pd.DataFrame):\n",
    "    \"\"\"Predict scores for a test batch.\n",
    "    Ensures no datetime/object columns slip in and types are numeric float32.\n",
    "    \"\"\"\n",
    "    # Build candidate feature set and drop pure ID / timestamp columns\n",
    "    cols = [c for c in df.columns if c not in [\"session_id\", \"ts_hour\", \"content_creation_ts\", \"content_id_raw\"]]\n",
    "    Xb = df[cols].copy()\n",
    "\n",
    "    # Drop any datetime columns\n",
    "    from pandas.api.types import is_datetime64_any_dtype\n",
    "    dt_cols = [c for c in Xb.columns if is_datetime64_any_dtype(Xb[c])]\n",
    "    if dt_cols:\n",
    "        Xb = Xb.drop(columns=dt_cols)\n",
    "\n",
    "    # Keep only numeric columns (avoid stray objects)\n",
    "    num_cols = Xb.select_dtypes(include=[np.number]).columns.tolist()\n",
    "    if len(num_cols) != Xb.shape[1]:\n",
    "        Xb = Xb[num_cols]\n",
    "\n",
    "    # Ensure numeric type for LightGBM\n",
    "    Xb = Xb.astype(\"float32\", copy=False)\n",
    "\n",
    "    # Predict clicked\n",
    "    p_click = np.zeros(Xb.shape[0], dtype=np.float32)\n",
    "    for m in click_models:\n",
    "        p_click += m.predict(Xb, num_iteration=m.best_iteration)\n",
    "    if len(click_models) > 0:\n",
    "        p_click /= len(click_models)\n",
    "\n",
    "    # Predict ordered\n",
    "    p_order = np.zeros(Xb.shape[0], dtype=np.float32)\n",
    "    for m in order_models:\n",
    "        p_order += m.predict(Xb, num_iteration=m.best_iteration)\n",
    "    if len(order_models) > 0:\n",
    "        p_order /= len(order_models)\n",
    "\n",
    "    final = 0.7 * p_order + 0.3 * p_click\n",
    "\n",
    "    # Choose raw content id if present for submission\n",
    "    id_col = \"content_id_raw\" if \"content_id_raw\" in df.columns else \"content_id_hashed\"\n",
    "    out = pd.DataFrame({\n",
    "        \"session_id\": df[\"session_id\"].astype(str).values,\n",
    "        \"content_id\": df[id_col].astype(str).values,\n",
    "        \"final_score\": final,\n",
    "    })\n",
    "    return out\n",
    "\n",
    "\n",
    "print(\"[sanity] helpers defined:\", 'fetch_test_batch' in globals(), 'encode_and_timeparts' in globals(), 'predict_batch' in globals())\n",
    "\n",
    "parts = []\n",
    "offset = 0\n",
    "limit = 2_000_000\n",
    "\n",
    "while True:\n",
    "    t0 = time.time()\n",
    "    tb = fetch_test_batch(offset, limit)\n",
    "    if len(tb) == 0:\n",
    "        break\n",
    "    print(f\"[batch] fetched offset={offset} rows={len(tb)}\")\n",
    "    tb = encode_and_timeparts(tb)\n",
    "    pb = predict_batch(tb)\n",
    "    # sıralı prediction string (ham content_id ile)\n",
    "    pb = (\n",
    "        pb.sort_values([\"session_id\", \"final_score\"], ascending=[True, False])\n",
    "          .groupby(\"session_id\")[\"content_id\"]\n",
    "          .apply(lambda s: \" \".join(s.astype(str)))\n",
    "          .reset_index(name=\"prediction\")\n",
    "    )\n",
    "    part_path = f\"submission_part_{offset}.csv\"\n",
    "    pb.to_csv(part_path, index=False)\n",
    "    parts.append(part_path)\n",
    "    dt = time.time() - t0\n",
    "    print(f\"[batch] written {part_path} in {dt:.1f}s\")\n",
    "    offset += limit\n",
    "    del tb, pb\n",
    "    gc.collect()\n",
    "\n",
    "# Parçaları birleştir\n",
    "if not parts:\n",
    "    raise RuntimeError(\"Test partları oluşmadı. Test dosyası boş olabilir.\")\n",
    "\n",
    "print(\"[merge] Parçalar birleştiriliyor…\")\n",
    "con.execute(\"CREATE OR REPLACE TABLE subs(partition INT, session_id VARCHAR, prediction VARCHAR);\")\n",
    "for i, p in enumerate(parts):\n",
    "    con.execute(\"INSERT INTO subs SELECT ?, * FROM read_csv_auto(?, HEADER=TRUE)\", [i, p])\n",
    "\n",
    "# Bazı yarışmalarda test birden çok parçaya bölünmüş olabilir; yine de session_id unique kalmalı\n",
    "submission = con.execute(\"SELECT session_id, prediction FROM subs GROUP BY 1,2\").df()\n",
    "submission = submission.sort_values(\"session_id\").reset_index(drop=True)\n",
    "\n",
    "submission_path = \"submission.csv\"\n",
    "submission.to_csv(submission_path, index=False)\n",
    "print(f\"[done] submission yazıldı: {submission_path}, satır sayısı = {len(submission)} + başlık\")\n",
    "\n",
    "# Hızlı kontroller\n",
    "print(\"[check] İlk 3 satır:\")\n",
    "print(submission.head(3))\n",
    "\n",
    "# Kaggle CLI için örnek komut\n",
    "print(\"\\nKaggle'a gönderim için:\")\n",
    "print(\"kaggle competitions submit -c trendyol-e-ticaret-hackathonu-2025-kaggle -f submission.csv -m \\\"LGBM + geniş özellik seti\\\"\")\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8073218,
     "sourceId": 12770585,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 962.904951,
   "end_time": "2025-08-15T11:15:08.475750",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-15T10:59:05.570799",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "09d6b91bd1ca4d1cb722db7053b4fb01": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "2f8a36ef591543f88864a8404c6ee7be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "3af58555fe1b433ca3523a735a4020df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "3ffb913d4ea74179834d7b5b5e84ba7e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "48f03c26c017490f9653000ffadca84a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0afe066378545f4aaa3c865b359094b",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_75c188b6e2ee428dba6e210f3c49b4be",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "499e0804cd864a23bbc3fc6408a45ddb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ddfb3744627e4c57b23f3f2f407a28fe",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2f8a36ef591543f88864a8404c6ee7be",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "566ee9cd66f64248b03c1ca2d27ccc5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "58ebdfbaf3274c4bbd2fb36eb6d809aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_966df1b7db5f49e99a4dc0b4702ab5d7",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d2061fbb97624f8f8c5717b03a9e6652",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "73886cd23eb04d25b060d131c9badd36": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_09d6b91bd1ca4d1cb722db7053b4fb01",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3af58555fe1b433ca3523a735a4020df",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "75c188b6e2ee428dba6e210f3c49b4be": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "8410f2e9ae864938a391c826dab52e53": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "8a861ca2da374cf6be8acfb87ed75f71": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "966df1b7db5f49e99a4dc0b4702ab5d7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "aa04d90f6b99412e9ce1e41ffd17169d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "d2061fbb97624f8f8c5717b03a9e6652": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "d4eacaffa049466784fa25c4cdd282ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3ffb913d4ea74179834d7b5b5e84ba7e",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8a861ca2da374cf6be8acfb87ed75f71",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "ddfb3744627e4c57b23f3f2f407a28fe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "e0afe066378545f4aaa3c865b359094b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "auto"
      }
     },
     "e5fd380a359a4dd8a00804ac8a5cfe60": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_566ee9cd66f64248b03c1ca2d27ccc5d",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8410f2e9ae864938a391c826dab52e53",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     },
     "f282ca70931a4cfeb745f3280b3a7020": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": "black",
       "description_width": ""
      }
     },
     "f516e2f7c3d14363b7a6e43b10f1e0d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aa04d90f6b99412e9ce1e41ffd17169d",
       "max": 100.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f282ca70931a4cfeb745f3280b3a7020",
       "tabbable": null,
       "tooltip": null,
       "value": 100.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
